#!/bin/sh
#compdef bwenv

# Check required commands
function _bwenv_check_deps() {
  local deps=(bws jq)
  local missing=()
  for cmd in "${deps[@]}"; do
    if ! command -v "$cmd" >/dev/null 2>&1; then
      missing+=("$cmd")
    fi
  done

  __BWENV_IS_SOPS_INSTALLED=$(command -v sops >/dev/null 2>&1 && echo true || echo false)

  if (( ${#missing[@]} )); then
    echo "Error: missing dependencies: ${missing[*]}. Please install them and retry." >&2
    return 1
  fi
}

# Parse arguments for --profile
function _bwenv_parse_args() {
  __BWENV_PROFILE_ARG=""
  while [[ $# -gt 0 ]]; do
    case "$1" in
      -p|--profile)
        __BWENV_PROFILE_ARG="$2"
        shift 2
        ;;
      *) break ;;
    esac
  done
}

# Select profile file
function _bwenv_select_profile() {
  local config_dir=${BWENV_CONFIG_DIR:-$HOME/.bwenv/profiles}
  local profile_arg=${BWENV_PROFILE:-$__BWENV_PROFILE_ARG}
  local files=("$config_dir"/*)

  if [[ -n "$profile_arg" ]]; then
    __BWENV_PROFILE="$profile_arg"
    return 0
  elif (( ${#files[@]} == 1 )); then
    __BWENV_PROFILE=$(basename "${files[1]}")
    return 0
  fi
  # default file
  for f in "${files[@]}"; do
    if [[ $(basename "$f") == default ]]; then
      __BWENV_PROFILE=default
      return 0
    fi
  done
  # prompt until valid
  echo "Available profiles:"
  local choices=()
  for f in "${files[@]}"; do
    local name=$(basename "$f")
    echo "* $name"
    choices+=("$name")
  done
  while true; do
    echo -n "Select profile: "
    read __BWENV_PROFILE
    if [[ " ${choices[*]} " == *" $__BWENV_PROFILE "* ]]; then
      break
    else
      echo "Invalid profile: $__BWENV_PROFILE" >&2
    fi
  done
}

function _bwenv_find_envfile() {
  local config_dir="${BWENV_CONFIG_DIR:-$HOME/.bwenv}"
  local profiles_dir="$config_dir/profiles"
  local envfile="${BWENV_CONFIG_FILE:-$config_dir/$__BWENV_PROFILE}"

  if [[ ! -f "$envfile" ]]; then
    echo "Error: config file not found at $envfile" >&2
    return 1
  fi

  __BWENV_CONFIG_FILE=$envfile
}

# Load and decrypt env
function _bwenv_load_env() {
  _bwenv_find_envfile || return 1

  local envfile="$_BWENV_CONFIG_FILE"
  echo "Using config: $envfile"
  if $__BWENV_IS_SOPS_INSTALLED; then
    if sops filestatus --input-type dotenv "$envfile" 2>/dev/null | jq -e '.encrypted == true' >/dev/null; then
      source <(sops -d --input-type dotenv --output-type dotenv "$envfile")
    else
      source "$envfile"
    fi
  else
    source "$envfile"
  fi

  if [[ -z $BWS_ACCESS_TOKEN ]]; then
    echo "Error: BWS_ACCESS_TOKEN not set after decrypting $envfile" >&2
    return 1
  fi

  __BWENV_ACCESS_TOKEN="$BWS_ACCESS_TOKEN"
  __BWENV_PROJECT_ID="$BWS_PROJECT_ID"
}

# Resolve or prompt for project
function _bwenv_resolve_project() {
  local project_id="$__BWENV_PROJECT_ID"
  local access_token="$__BWENV_ACCESS_TOKEN"

  if [[ -z "$project_id" ]]; then
    local projects=$(bws project list --access-token "$access_token" 2>/dev/null) || { echo "Error: unable to list projects" >&2; return 1; }
    echo "Available projects:"
    echo "$projects" | jq -r '.[] | "* \(.name) (\(.id))"'
    echo -n "Select project name (empty for no project): "
    local name
    read name
    if [[ -n "$name" ]]; then
      project_id=$(jq -r --arg NAME "$name" '.[] | select(.name==$NAME) | .id' <<<"$projects")
      [[ -z "$project_id" ]] && { echo "Error: no project named '$name'" >&2; return 1; }
    fi
  fi
  
  if [[ -n "$project_id" ]]; then
    local info=$(bws project get --access-token "$access_token" "$project_id" 2>/dev/null) || { echo "Error: unable to fetch project $project_id" >&2; return 1; }
    local name=$(jq -r '.name' <<<"$info")
    echo "Using project: $name ($project_id)"
  else
    echo "No project selected."
  fi

  __BWENV_PROJECT_ID="$project_id"
}

# Preview secrets and confirm
function _bwenv_export_secrets() {
  local project_id="$__BWENV_PROJECT_ID"
  local access_token="$__BWENV_ACCESS_TOKEN"
  local secrets=$(bws secret list --access-token "$access_token" $project_id 2>/dev/null  | jq -c '[ .[] | { key, value: (.value | @base64) } ]' ) || { echo "Error: unable to list secrets" >&2; return 1; }
  echo "Secrets to be injected:"
  echo "$secrets" | jq -r '.[] | "* \(.key)"' 
  echo -n "Proceed? [y/N] "
  local confirm
  read confirm
  [[ $confirm =~ ^[Yy]$ ]] || { echo "Aborted."; return 1; }

  echo "$secrets" | jq -c '.[]' | while read -r secret; do
    local key="$(jq -r '.key' <<<"$secret")" 
    local value="$(jq -r '.value' <<<"$secret" | base64 -d)"
    export "$key"="$value" 
  done
}

# Main function
function bwenv() {
  trap 'cleanup' EXIT
  
  _bwenv_parse_args "$@"
  _bwenv_check_deps   || return 1
  _bwenv_select_profile || return 1
  _bwenv_load_env     || return 1
  _bwenv_resolve_project || return 1
  _bwenv_export_secrets || return 1
  
  echo "Done. Environment variables set."
}

# allow direct invocation when autoloaded
bwenv "$@"
